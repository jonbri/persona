#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $home=$ENV{HOME};
my $configFile="$home/.persona.properties";
my %places=();
my $a_quiet;
my $a_update;
my $a_help;

sub help() {
    print STDERR <<'HELP';

persona

USAGE:
  >> persona [<place>] [options]

Options:
  --update (-u) Fix author and committer of HEAD
  --quiet  (-q) Don't write to stdout
  --help   (-h) See this message

EXAMPLES:
  >> persona      - print current settings
  >> persona work - switch to "work" persona
  >> persona -u   - update HEAD commit

https://github.com/jonbri/persona

HELP
}


sub readConfig {
    my $place;

    if (!-e $configFile) {
        print STDERR "configuration file not found: $configFile\n";
        exit 1;
    }

    open(FH,'<', $configFile) or die("Could not open config file\n");
    while (<FH>) {
        chomp;

        if (/^#/) {
            next;
        }

        # start of new place
        if (/^\w/) {
            $place = $_;
            $places{$place} = ();
        }

        # attributes of place
        if (/^\s\s\w/) {
            my $line = $_;
            $line =~ m/^\s\s(\S+)\s(.*)$/;
            $places{$place}{$1} = $2;
        }
    }
    close FH;
}

sub applyPlace($) {
    my ($place)=@_;

    if (!defined $place) {
      return;
    }

    if (!defined $places{$place}) {
        print STDERR "Place \"$place\" not found in configuration ($configFile).\n";
        exit 1;
    }

    my $name = $places{$place}{'name'};
    if (defined $name) {
        `git config --global user.name "${name}"`;
    }

    my $email = $places{$place}{'email'};
    if (defined $email) {
        `git config --global user.email $email`;
    }

    my $ssh_dir = "$home/.ssh";
    my $place_dir = "$home/.esesh/$place";
    my $esesh_dir = "$place_dir/.ssh";
    if (-d $esesh_dir) {
      `cp -R $esesh_dir/id_rsa $ssh_dir/id_rsa`;
      `cp -R $esesh_dir/id_rsa.pub $ssh_dir/id_rsa.pub`;
      `cp -R $esesh_dir/config $ssh_dir/config`;
      `cp -R $place_dir/.npmrc $home`;
      `echo $place > $home/.ssh/persona`;
    } else {
      print ".esesh entry NOT found\n";
    }

    printSettings();
}

sub printSettings() {
    if (!defined $a_quiet) {
        print `git config --get user.name`;
        print `git config --get user.email`;
    }
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

sub applyUpdate {
    if (defined $a_update) {
        `git update-ref -d refs/heads/z_persona_tmp`;
        `git branch z_persona_tmp`;
        `git reset HEAD~`;
        `git add .`;
        `git commit --reuse-message=z_persona_tmp --reset-author`;
        `git branch -D z_persona_tmp`;
    }
}

MAIN: {
    readConfig();

    GetOptions(
        'quiet' => \$a_quiet,
        'update' => \$a_update,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg=getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    # no args, just show settings
    if (!defined $firstArg) {
        printSettings();
    }

    applyPlace($firstArg);

    applyUpdate();
}
